---
import { dishes } from '../../data/dishes';
import CardDishModelTwo from "../CardsDishes/CardDishModelTwo.astro";

interface Props {
  category: string;
  initiallyVisible: boolean;
}

const { category, initiallyVisible = false } = Astro.props;

// Filtrar platos por categoría
const filteredDishes = dishes.filter(dish => 
  dish.category === category
).map(dish => ({
  ...dish,
  // _id: dish._id || crypto.randomUUID()
}));

const categoryId = category.toLowerCase().replace(/\s+/g, '-');
---

<section 
  class="menu-section" 
  id={categoryId} 
  data-category={category}
  style={initiallyVisible ? "" : "display: none;"}
>
  <h2 class="section-title">{category}</h2>
  <div class="menu-grid">
    {filteredDishes.map((dish, index) => (
      <CardDishModelTwo dish={dish}  />
    ))}
  </div>
</section>

<script define:vars={{ categoryId, category }}>
  function handleCategoryChange(event) {
    const section = document.getElementById(categoryId);
    if (!section) return;
    
    const selectedCategory = event.detail.category;
    
    // Mostrar si se ha seleccionado "TODOS" (*) o es esta categoría específica
    if (selectedCategory === '*' || selectedCategory === categoryId) {
      // Hacer visible la sección
      section.style.display = 'block';
      
      // Animar elementos después de un pequeño retraso para asegurar que sea visible
      setTimeout(() => {
        animateItems(section);
      }, 50);
    } else {
      // Ocultar la sección si no coincide
      section.style.display = 'none';
    }
  }
  
  function resetAnimation(section) {
    const menuItems = section.querySelectorAll('.menu-item');
    menuItems.forEach(item => {
      item.classList.remove('visible');
    });
  }
  
  function animateItems(section) {
    // Primero resetear animaciones
    resetAnimation(section);
    
    // Luego aplicar animaciones con retraso escalonado
    const menuItems = section.querySelectorAll('.menu-item');
    menuItems.forEach((item, index) => {
      setTimeout(() => {
        item.classList.add('visible');
      }, index * 50); // 50ms de retraso entre cada elemento
    });
  }
  
  // Inicializar animaciones si la sección está visible
  function initializeSection() {
    const section = document.getElementById(categoryId);
    if (section && section.style.display !== 'none') {
      // Pequeño retraso para asegurar que el DOM esté listo
      setTimeout(() => {
        animateItems(section);
      }, 100);
    }
  }
  
  // Escuchar eventos de cambio de categoría
  function setupEventListeners() {
    window.addEventListener('categoryChanged', handleCategoryChange);
  }
  
  // Ejecutar todo lo necesario cuando la página se carga
  function init() {
    setupEventListeners();
    initializeSection();
  }
  
  // Inicializar cuando Astro complete la carga de la página
  document.addEventListener('astro:page-load', init);
  
  // Limpiar cuando se va a desmontar la página
  document.addEventListener('astro:before-swap', () => {
    window.removeEventListener('categoryChanged', handleCategoryChange);
  });
</script>

<style>
  .menu-section {
    margin: 1.6rem 0;
    padding: 2rem 0;
    border-top: 2px solid var(--color-accent);
  }

  .section-title {
    font-size: 1.6rem;
    color: var(--color-accent);
    margin-bottom: 1.2rem;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
  }
  
  .menu-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
    max-width: 1024px;
    margin: 0 auto;
  }
</style>