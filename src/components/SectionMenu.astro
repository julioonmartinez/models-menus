---
//componentes/SectionMenu.astro
import { dishes } from '../data/dishes';
import vaca from '/src/assets/vaca.webp';
import vaca1 from '/src/assets/vaca1.webp'
import vaca2 from '/src/assets/vaca2.webp'
import vaca3 from '/src/assets/vaca3.webp'
import vaca4 from '/src/assets/vaca4.webp'
import vaca5 from '/src/assets/vaca5.webp'
import vaca6 from '/src/assets/vaca6.webp'
import vaca7 from '/src/assets/vaca7.webp'
import vaca8 from '/src/assets/vaca8.webp'
import vaca9 from '/src/assets/vaca9.webp'
import { DISHES_GROUPED } from '../data/dishes';
import CategoryFilter from './CategoryFilter.astro';
const images = [vaca, vaca1, vaca2, vaca3, vaca4, vaca5, vaca6, vaca7, vaca8, vaca9];

const SECTION_ORDER = [
  'ENTRADAS',
  'DEL MAR',
  'OSTIONES',
  'ALMEJAS',
  'TACOS Y TOSTADAS',
  'PIZZAS',
  'PASTAS',
  'ENSALADAS',
  'CORTES',
  'GUARNICIONES',
  'MENÚ KIDS'
];
const getImage = (index:number) => images[index % images.length];
const dishImages = dishes.map((_, index) => images[index % images.length].src);
dishes.forEach(dish=>{
  dish._id = crypto.randomUUID()
})
---
<CategoryFilter />
{SECTION_ORDER.map((category) => (
    DISHES_GROUPED[category]?.length && (
      <section  class="menu-section" id={category.toLowerCase().replace(/\s+/g, '-')}>
        <h2 class="section-title">{category}</h2>
        <div class="menu-grid">
          {DISHES_GROUPED[category].map((dish, index) => (
  <a 
    href={`/dishes/${index}`} 
    class="menu-item"
    style="text-decoration: none; color: inherit;"
  >
    <div class="menu-item-img">
      <img 
        src={getImage(index).src}
        alt={dish.name}
        transition:name={`img-${dish._id}`}
        loading="lazy"
      />
    </div>
    <div class="menu-item-content">
      <h3>{dish.name}</h3>
      <p>{dish.shortDescription}</p>
      <div class="content-price">
        <div class="price">${dish.price.toFixed(2)}</div>
        {dish.reviewsCount && (
          <div class="rating">
            ★ {dish.rating} ({dish.reviewsCount} reseñas)
          </div>
        )}
      </div>
    </div>
  </a>
))}
        </div>
      </section>
    )
  ))}
  <script>
    
    document.addEventListener('DOMContentLoaded', function() {
        const menuItems = document.querySelectorAll('.menu-item');
        
        menuItems.forEach((item) => {
            const rect = item.getBoundingClientRect();
            const isVisible = (
                rect.top >= 0 &&
                rect.left >= 0 &&
                rect.bottom <= window.innerHeight &&
                rect.right <= window.innerWidth
            );
            
            if (!isVisible) {
                item.classList.add('animate-on-scroll');
            } else {
                // Solución con tipado correcto
                (item as HTMLElement).style.opacity = '1';
                (item as HTMLElement).style.scale = '100%';
            }
        });
    });
//     document.addEventListener('DOMContentLoaded', function() {
//   const menuItems = document.querySelectorAll('.menu-item');
  
//   menuItems.forEach((item) => {
//     const rect = item.getBoundingClientRect();
//     const isVisible = (
//       rect.top >= 0 &&
//       rect.left >= 0 &&
//       rect.bottom <= window.innerHeight &&
//       rect.right <= window.innerWidth
//     );
    
//     if (!isVisible) {
//       item.classList.add('animate-on-scroll');
//     } else {
//       // Verificar que el elemento es un HTMLElement antes de acceder a style
//       if (item instanceof HTMLElement) {
//         item.style.opacity = '1';
//         item.style.scale = '100%';
//       }
//     }
//   });
// });
</script>
  <style>
   
    .menu-section {
    margin: 2rem 0;
    padding: 2rem 0;
    border-top: 2px solid var(--color-accent);
  }

  .section-title {
    font-size: 2rem;
    color: var(--color-accent);
    margin-bottom: 2rem;
    text-transform: uppercase;
    letter-spacing: 2px;
    text-align: center;
  }
    .menu-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 2rem;
        }
        
        .menu-item {
    background-color: var(--color-primary);
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.07);
    transition: transform 0.3s;
}

  /* Aplicamos la animación solo a los elementos con la clase "animate-on-scroll" */
  .menu-item.animate-on-scroll {
      view-timeline-name: --reveal;
      animation-name: show;
      animation-fill-mode: both;
      animation-timeline: --reveal;
  }
        
        .menu-item:hover {
            transform: translateY(-10px);
        }
        
        .menu-item-img {
            height: 200px;
            overflow: hidden;
        }
        
        .menu-item-img img {
            width: 100%;
            height: 100%;
            object-fit: cover;
            transition: transform 0.5s;
        }
        
        .menu-item:hover .menu-item-img img {
            transform: scale(1.1);
        }
        
        .menu-item-content {
            padding: 1.5rem;
        }
        
        .menu-item-content h3 {
            font-size: 1.5rem;
            margin-bottom: 0.25rem;
            color: var(--color-text);
        }
        
        .menu-item-content p {
            margin-bottom: 0.5rem;
            color: #666;
        }
        .content-price{
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        .rating {
    color: #666;
    font-size: 0.9rem;
    /* margin-top: 0.5rem; */
  }
        
        .price {
            color: var(--color-accent);
            font-weight: bold;
            font-size: 1.2rem;
        }

        @keyframes show {
          from {
            opacity: 0.6; scale: 80%;
          }
          to {
            opacity: 1; scale: 100%;
          }
        }
    
  </style>